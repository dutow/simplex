
#pragma once

#include <vector>
#include <string>

#include <boost/filesystem/path.hpp>

namespace simplex {

/// <summary>	Program arguments represented as a class. </summary>
class program_arguments {
   public:
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Constructor. </summary>
    ///
    /// <param name="argc">	The argument count. </param>
    /// <param name="argv">	[in] argument list. </param>
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    program_arguments(int argc, char* argv[]);

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Executable path. </summary>
    ///
    /// <returns>	A const&amp; </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    boost::filesystem::path const& executable_path() const;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Executable directory. </summary>
    ///
    /// <returns>	A const&amp; </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    boost::filesystem::path const& executable_directory() const;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Returns a parameter. Doesn't contain the executable name. </summary>
    ///
    /// <param name="idx">	The index. </param>
    ///
    /// <returns>	The indexed value. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    std::string const& operator[](size_t idx) const;

    ////////////////////////////////////////////////////////////////////////////////////////////////////
    /// <summary>	Argument count. </summary>
    ///
    /// <returns>	An int. </returns>
    ////////////////////////////////////////////////////////////////////////////////////////////////////
    size_t argument_count() const;

   private:
    boost::filesystem::path executable;
    boost::filesystem::path executable_dir;
    std::vector<std::string> arguments;
};
}